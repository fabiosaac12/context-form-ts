{"version":3,"sources":["../../src/Context.ts","../../src/hoc/withField.tsx","../../src/validations/index.ts","../../src/hoc/withForm.tsx","../../src/Provider.tsx","../../src/Field.tsx","../../src/hooks/useField.ts","App.tsx","../../src/hooks/useForm.ts","index.tsx"],"names":["FormContext","createContext","FieldContext","Component","FormProvider","children","useState","values","setValues","errors","setErrors","validateFunctions","setValidateFunctions","defaultValues","setDefaultValues","hasTriedToSubmit","setHasTriedToSubmit","resetFieldFuncions","setResetFieldFunctions","setDefaultValue","name","defaultValue","setValue","value","setError","error","setResetFieldFunction","resetFieldFunction","handleSubmit","onSubmit","e","newErrors","validate","newError","Object","verifyErrors","contextValue","useMemo","cleanForm","resetForm","fn","setValidateFunction","Field","memo","hasBeenTouched","hasChanged","setHasChanged","setHasBeenTouched","otherProps","input","onChange","target","type","checked","inputValue","onBlur","info","prev","next","props","useContext","getContextValue","useEffect","propsToField","React","min","errorMessage","max","inputs","placeholder","functions","compose","isNaN","Number","App","form","map","key","className","onClick","alert","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"4NAwBaA,EAAcC,wBAApB,IAkBMC,EAAeD,wBAArB,I,+9CCrCA,IAAyE,ECuCxD,ECzCCE,ECWZC,EAAmB,SAAC,G,IAAEC,aACjC,EAA4BC,mBAA5B,IAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAA5B,IAAOG,EAAP,KAAeC,EAAf,KACA,EAAkDJ,mBAAlD,IAAOK,EAAP,KAA0BC,EAA1B,KAGA,EAA0CN,mBAA1C,IAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAgDR,oBAAhD,GAAOS,EAAP,KAAyBC,EAAzB,KACA,EAAqDV,mBAArD,IAAOW,EAAP,KAA2BC,EAA3B,KAIMC,EAA+C,SAACC,EAAMC,GAAP,OACnDP,GAAiB,qDAKbQ,EAAwC,SAACF,EAAMG,GAAP,OAC5Cf,GAAU,qDAKNgB,EAAsD,SAACJ,EAAMK,GAAP,OAGtDf,EAFHe,EAEa,kDADA,sCAcVC,EAAwB,SAACC,GAAD,OAC5BT,GAAuB,uCAuBnBU,EAAe,SAACC,GAAD,OAA8B,YACjDC,eAAC,IAADA,uBAnBmB,WACnB,IAAMC,EAAN,GAEA,IAAK,IAAL,OAAoC,CAClC,IAAMR,EAAQhB,MAAd,GACMyB,EAAWrB,EAAjB,GACMsB,EAAWD,GAAYA,EAA7B,GAEA,IAAcD,QAGhB,OAAIG,sBAAJ,IAEAxB,MAEA,GAMIyB,IACEpB,GAAoBC,GAArB,GADea,EAApB,KAIIO,EAAiCC,mBACrC,iBAAO,CACL9B,OADK,EAELe,SAFK,EAGLd,UAHK,EAILK,cAJK,EAKLM,gBALK,EAMLL,iBANK,EAOLL,OAPK,EAQLe,SARK,EASLd,UATK,EAUL4B,UAAW,kBAAM9B,EAAN,KACX+B,UAAW,WACT/B,KACA,kCAAmCgC,EAAnC,aAEFZ,aAfK,EAgBLb,sBAEF,CAACR,EAAQM,EAnBX,IAsCA,OACE,kBAACb,EAAD,UAAsBuB,MAAOa,GAC3B,kBAAClC,EAAD,UAAuBqB,MAlBkB,SAACH,GAAD,OAC3CiB,mBACE,iBAAO,CACLd,MAAOhB,EADF,GAELkB,MAAOhB,EAFF,GAGLa,SAAU,mBAAWA,EAASF,EAApB,IACVI,SAAU,mBAAWA,EAASJ,EAApB,IACVqB,oBAAqB,mBAlEvB,SAACrB,EAAMY,GAAP,OACFpB,GAAqB,oDAiEa6B,CAAoBrB,EAA7B,IACrBC,aAAcR,EANT,GAOLM,gBAAiB,mBAAkBA,EAAgBC,EAAlC,IACjBM,sBARK,EASLX,sBAEF,CAACR,EAAD,GAAeE,EAb0B,OAgB7C,KCjGWiC,GJrBmE,EIsB9EC,gBACE,Y,IACEtC,aACAe,SACAY,aACAY,mBACAC,eACApB,UACAF,UACAD,aACAwB,kBACAC,sBACAvB,aA8CA,OAAOnB,EA3CY,KAFhB2C,4IAEgB,CAEjB5B,KAFiB,EAGjB6B,MAAO,CACL1B,WAAOA,SADF,EAEL2B,SAAU,Y,IAAGC,WAETC,EAGED,EAJJ,KAEEE,EAEEF,EAJJ,QAGSG,EACLH,EAJJ,MAMM5B,EACJ6B,iBAEIA,gBAHN,EAOA9B,MACA,GAAewB,GAAf,GAEA,IAAMb,EAAWD,GAAYA,EAA7B,GACAC,OAAsBT,EAAtBS,IAEFsB,OAAQ,WACN,QACER,OAEA,GAAiB,CACf,IAAMd,EAAWD,GAAYA,EAAST,GAAtC,IACAU,OAAsBT,EAAtBS,MAKRuB,KAAM,CACJZ,eADI,EAEJC,WAFI,EAGJpB,eAMN,sBAEIgC,UAAeC,EAAfD,OACAA,eAAoBC,EADpBD,YAEAA,mBAAwBC,EAFxBD,gBAGAA,UAAeC,EALnB,UJhFC,Y,IAAGrC,iBAAiBsC,wBACvB,EAAoCrD,oBAApC,GAAOuC,EAAP,KAAmBC,EAAnB,KACA,EAA4CxC,oBAA5C,GAAOsC,EAAP,KAAuBG,EAAvB,KAIA,EKV4Ba,qBAAN,ELgBlBC,CAAgBF,EANpB,MACExC,EADF,kBAEEsB,EAFF,sBAGE1B,EAHF,mBAIEW,EAJF,wBAKKU,EALL,0FAQA0B,qBAAU,gBACR,IAAIzC,IACFe,cACAjB,MAGFsB,EAAoBkB,EAApBlB,UACAf,GAAsB,WACpBoB,MACAC,WATJe,IAaAA,qBAAU,WACR,IACEf,MACAD,SAED,CALHgB,IAOA,IAAMC,EAAe,EAAH,QAGhBlB,WAHgB,EAIhBD,eAJgB,EAKhBE,cALgB,EAMhBC,sBAGF,OAAOiB,qCAAP,MCzCWC,EAAM,SAAC,EAAD,mBAEjBC,OAFiB,GAGqB,YACtC,MAAwB,kBAAV3C,EAAqBA,EAAQA,EAArC,SAAN,GACE,OAAO2C,IAGEC,EAAM,SAAC,EAAD,mBAEjBD,OAFiB,GAGqB,YACtC,MAAwB,kBAAV3C,EAAqBA,EAAQA,EAArC,SAAN,GACE,OAAO2C,IKVLE,EAAS,CACb,CACEhD,KAAM,OACNiD,YAAa,OACbrC,SAAUiC,EAAI,EAAG,yBAEnB,CACE7C,KAAM,WACNiD,YAAa,YACbrC,SAAUmC,EAAI,GAAI,0BAEpB,CACE/C,KAAM,UACNiD,YAAa,UACbrC,SAAUiC,EAAI,EAAG,yBAEnB,CACE7C,KAAM,MACNiD,YAAa,MACbrC,SL+BmB,sCAClBsC,EADkB,yBAClBA,EADkB,uBAEG,YAGxB,IAFA,MAEA,wBAA0B,KAClBrC,GAAWO,EADO,SACxB,GAEA,OACEf,IAEA,kBAAWQ,GAAuB,MAItC,KAAW,OAAOR,GK9CN8C,ELaU,EKZV,wBLYS,IACrBL,OADqB,GAEQ,YAC7B,GAAIM,MAAMC,OAAV,IAA0B,OAAOP,IKd7BD,EAAI,EAAG,aACPE,EAAI,GAAI,eAEVf,KAAM,WAoCKsB,GJrEUvE,EI4CJ,WACnB,IAAMwE,EC7CqBf,qBAAN,GDkDrB,OACE,oCACGQ,EAAOQ,KAAI,SAAC3B,GAAD,OACV,kBAACP,EAAD,eAAOmC,IAAK5B,EAAM7B,MAAU6B,IACzB,gBAAGA,EAAH,EAAGA,MAAOO,EAAV,EAAUA,KAASG,EAAnB,uCACC,yBAAKmB,UAAU,kBACb,2CAAW7B,EAAX,CAAkB6B,UAAU,SAAYnB,MACrCH,EAAK/B,OAAS+B,EAAKZ,gBACpB,yBAAKkC,UAAU,SAAStB,EAAK/B,cAMvC,4BAAQsD,QAASJ,EAAK/C,cAjBO,SAACrB,GAAD,OAC/ByE,MAAMC,KAAKC,UAAU3E,EAAQ,KAAM,QAgBjC,YJhE2C,kBAC/CyD,yBACEA,oBAF6C,SMCjDmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e240ec07.chunk.js","sourcesContent":["import { createContext, FormEvent } from 'react';\nimport { FormState } from './models/FormState';\nimport { FormStateValueSetter } from './models/FormStateValueSetter';\nimport { FormStateSetter } from './models/FormStateSetter';\nimport { SubmitFunction } from './models/SubmitFunction';\nimport { ErrorMessage } from './models/ErrorMessage';\nimport { ValidateFunction } from './models/ValidateFunction';\nimport { Value } from './models/Value';\n\nexport type FormContextProps = {\n  values: FormState<Value>;\n  setValue: FormStateValueSetter<Value>;\n  setValues: FormStateSetter<Value>;\n  errors: FormState<ErrorMessage>;\n  setError: FormStateValueSetter<string>;\n  setErrors: FormStateSetter<string>;\n  defaultValues: FormState<Value>;\n  setDefaultValue: FormStateValueSetter<Value>;\n  setDefaultValues: FormStateSetter<Value>;\n  cleanForm: () => void;\n  resetForm: () => void;\n  handleSubmit: (onSubmit: SubmitFunction) => (event?: FormEvent) => void;\n};\n\nexport const FormContext = createContext<FormContextProps>(\n  {} as FormContextProps,\n);\n\nexport type FieldContextProps = (\n  name: string,\n) => {\n  value: Value;\n  setValue: (value: Value) => void;\n  error: ErrorMessage;\n  setError: (error: ErrorMessage | void) => void;\n  setValidateFunction: (fn?: ValidateFunction<Value>) => void;\n  defaultValue: Value;\n  setDefaultValue: (value: Value) => void;\n  setResetFieldFunction: (fn: () => void) => void;\n  hasTriedToSubmit: boolean;\n};\n\nexport const FieldContext = createContext<FieldContextProps>(\n  {} as FieldContextProps,\n);\n","import React, { useState, useEffect } from 'react';\nimport { useField } from '../hooks';\nimport { InnerFieldProps } from '../Field';\nimport { FieldType } from '../models/Field';\n\nexport const withField: (InnerField: React.FC<InnerFieldProps>) => FieldType = (\n  InnerField,\n) => ({ defaultValue, ...props }) => {\n  const [hasChanged, setHasChanged] = useState(false);\n  const [hasBeenTouched, setHasBeenTouched] = useState(false);\n\n  const getContextValue = useField();\n\n  const {\n    setDefaultValue,\n    setValidateFunction,\n    hasTriedToSubmit,\n    setResetFieldFunction,\n    ...contextValue\n  } = getContextValue(props.name);\n\n  useEffect(() => {\n    if (defaultValue !== undefined) {\n      contextValue.setValue(defaultValue);\n      setDefaultValue(defaultValue);\n    }\n\n    setValidateFunction(props.validate);\n    setResetFieldFunction(() => {\n      setHasChanged(false);\n      setHasBeenTouched(false);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (hasTriedToSubmit) {\n      setHasBeenTouched(true);\n      setHasChanged(true);\n    }\n  }, [hasTriedToSubmit]);\n\n  const propsToField = {\n    ...props,\n    ...contextValue,\n    hasChanged,\n    hasBeenTouched,\n    setHasChanged,\n    setHasBeenTouched,\n  };\n\n  return <InnerField {...propsToField} />;\n};\n","import { ValidateFunction } from '../models/ValidateFunction';\nimport { ErrorMessage } from '../models/ErrorMessage';\n\nexport const required = (\n  errorMessage: ErrorMessage = true,\n): ValidateFunction<any> => (value) => {\n  if (!value) return errorMessage;\n};\n\nexport const min = (\n  n: number,\n  errorMessage: ErrorMessage = true,\n): ValidateFunction<string | number> => (value) => {\n  if (!((typeof value === 'number' ? value : value.length) >= n))\n    return errorMessage;\n};\n\nexport const max = (\n  n: number,\n  errorMessage: ErrorMessage = true,\n): ValidateFunction<string | number> => (value) => {\n  if (!((typeof value === 'number' ? value : value.length) <= n))\n    return errorMessage;\n};\n\nexport const email = (\n  errorMessage: ErrorMessage = true,\n): ValidateFunction<string> => (value) => {\n  if (!Boolean(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.exec(value)))\n    return errorMessage;\n};\n\nexport const alphanumeric = (\n  errorMessage: ErrorMessage = true,\n): ValidateFunction<string> => (value) => {\n  if (!Boolean(/^[a-z0-9]*$/i.exec(value))) return errorMessage;\n};\n\nexport const alpha = (\n  errorMessage: ErrorMessage = true,\n): ValidateFunction<string> => (value) => {\n  if (!Boolean(/^[a-z]*$/i.exec(value))) return errorMessage;\n};\n\nexport const numeric = (\n  errorMessage: ErrorMessage = true,\n): ValidateFunction<string> => (value) => {\n  if (isNaN(Number(value))) return errorMessage;\n};\n\nexport const lowercase = (\n  errorMessage: ErrorMessage = true,\n): ValidateFunction<string> => (value) => {\n  if (!Boolean(/^[^A-Z]*$/.exec(value))) return errorMessage;\n};\n\nexport const uppercase = (\n  errorMessage: ErrorMessage = true,\n): ValidateFunction<string> => (value) => {\n  if (!Boolean(/^[^a-z]*$/.exec(value))) return errorMessage;\n};\n\nexport const compose = <T>(\n  ...functions: ValidateFunction<T>[]\n): ValidateFunction<T> => (value) => {\n  let error;\n\n  for (let fn of functions) {\n    const newError = fn(value);\n\n    if (newError) {\n      error = newError;\n\n      if (typeof newError === 'string') break;\n    }\n  }\n\n  if (error) return error;\n};\n","import React from 'react';\nimport { FormProvider } from '../Provider';\n\nexport const withForm = (Component: React.FC) => () => (\n  <FormProvider>\n    <Component />\n  </FormProvider>\n);\n","import React, { useState, useMemo, FC, FormEvent } from 'react';\nimport {\n  FormContext,\n  FieldContext,\n  FieldContextProps,\n  FormContextProps,\n} from './Context';\nimport { SubmitFunction } from './models/SubmitFunction';\nimport { FormState } from './models/FormState';\nimport { ValidateFunction } from './models/ValidateFunction';\nimport { FormStateValueSetter } from './models/FormStateValueSetter';\nimport { ErrorMessage } from './models/ErrorMessage';\nimport { Value } from './models/Value';\n\nexport const FormProvider: FC = ({ children }) => {\n  const [values, setValues] = useState<FormState<Value>>({});\n  const [errors, setErrors] = useState<FormState<ErrorMessage>>({});\n  const [validateFunctions, setValidateFunctions] = useState<\n    FormState<ValidateFunction<Value> | undefined>\n  >({});\n  const [defaultValues, setDefaultValues] = useState<FormState<Value>>({});\n  const [hasTriedToSubmit, setHasTriedToSubmit] = useState(false);\n  const [resetFieldFuncions, setResetFieldFunctions] = useState<(() => void)[]>(\n    [],\n  );\n\n  const setDefaultValue: FormStateValueSetter<Value> = (name, defaultValue) =>\n    setDefaultValues((defaultValues) => ({\n      ...defaultValues,\n      [name]: defaultValue,\n    }));\n\n  const setValue: FormStateValueSetter<Value> = (name, value) =>\n    setValues((values) => ({\n      ...values,\n      [name]: value,\n    }));\n\n  const setError: FormStateValueSetter<ErrorMessage | void> = (name, error) =>\n    !error\n      ? setErrors(({ [name]: _, ...otherErrors }) => otherErrors)\n      : setErrors((errors) => ({\n          ...errors,\n          [name]: error,\n        }));\n\n  const setValidateFunction: FormStateValueSetter<\n    ValidateFunction<Value> | undefined\n  > = (name, validate) =>\n    setValidateFunctions((validateFunctions) => ({\n      ...validateFunctions,\n      [name]: validate,\n    }));\n\n  const setResetFieldFunction = (resetFieldFunction: () => void) =>\n    setResetFieldFunctions((resetFieldFunctions) => [\n      ...resetFieldFunctions,\n      resetFieldFunction,\n    ]);\n\n  const verifyErrors = () => {\n    const newErrors = {};\n\n    for (let name in validateFunctions) {\n      const value = values[name] || '';\n      const validate = validateFunctions[name];\n      const newError = validate && validate(value);\n\n      if (newError) newErrors[name] = newError;\n    }\n\n    if (Object.keys(newErrors).length < 1) return true;\n\n    setErrors(newErrors);\n\n    return false;\n  };\n\n  const handleSubmit = (onSubmit: SubmitFunction) => (e?: FormEvent) => {\n    e?.preventDefault();\n\n    if (verifyErrors()) onSubmit(values);\n    else !hasTriedToSubmit && setHasTriedToSubmit(true);\n  };\n\n  const contextValue: FormContextProps = useMemo(\n    () => ({\n      values,\n      setValue,\n      setValues,\n      defaultValues,\n      setDefaultValue,\n      setDefaultValues,\n      errors,\n      setError,\n      setErrors,\n      cleanForm: () => setValues({}),\n      resetForm: () => {\n        setValues(defaultValues);\n        for (let fn of resetFieldFuncions) fn();\n      },\n      handleSubmit,\n      hasTriedToSubmit,\n    }),\n    [values, defaultValues, errors],\n  );\n\n  const fieldContextValue: FieldContextProps = (name) =>\n    useMemo(\n      () => ({\n        value: values[name],\n        error: errors[name],\n        setValue: (value) => setValue(name, value),\n        setError: (error) => setError(name, error),\n        setValidateFunction: (fn?) => setValidateFunction(name, fn),\n        defaultValue: defaultValues[name],\n        setDefaultValue: (defaultValue) => setDefaultValue(name, defaultValue),\n        setResetFieldFunction,\n        hasTriedToSubmit,\n      }),\n      [values[name], errors[name]],\n    );\n\n  return (\n    <FormContext.Provider value={contextValue}>\n      <FieldContext.Provider value={fieldContextValue}>\n        {children}\n      </FieldContext.Provider>\n    </FormContext.Provider>\n  );\n};\n","import { memo, Dispatch } from 'react';\nimport { withField } from './hoc';\nimport { ValidateFunction } from './models/ValidateFunction';\nimport { ErrorMessage } from './models/ErrorMessage';\nimport { Value } from './models/Value';\nimport {\n  FieldChildren,\n  FieldChildrenProps,\n  FieldType,\n} from './models/Field';\n\nexport interface InnerFieldProps {\n  children: FieldChildren;\n  name: string;\n  validate?: ValidateFunction<Value>;\n  hasBeenTouched: boolean;\n  hasChanged: boolean;\n  error?: ErrorMessage;\n  value: Value;\n  setValue: Dispatch<Value>;\n  setError: Dispatch<ErrorMessage | void>;\n  setHasChanged: Dispatch<boolean>;\n  setHasBeenTouched: Dispatch<boolean>;\n  [key: string]: any;\n}\n\nexport const Field: FieldType = withField(\n  memo<InnerFieldProps>(\n    ({\n      children,\n      name,\n      validate,\n      hasBeenTouched,\n      hasChanged,\n      error,\n      value,\n      setValue,\n      setHasChanged,\n      setHasBeenTouched,\n      setError,\n      ...otherProps\n    }) => {\n      const propsToRender: FieldChildrenProps = {\n        ...otherProps,\n        name,\n        input: {\n          value: value === undefined ? '' : value,\n          onChange: ({ target }) => {\n            const {\n              type,\n              checked,\n              value: inputValue,\n            } = target as HTMLInputElement;\n\n            const value =\n              type === 'checkbox'\n                ? checked\n                : type === 'number'\n                ? +inputValue\n                : inputValue;\n\n            setValue(value);\n            !hasChanged && setHasChanged(true);\n\n            const newError = validate && validate(value);\n            newError !== error && setError(newError);\n          },\n          onBlur: () => {\n            if (!hasBeenTouched) {\n              setHasBeenTouched(true);\n\n              if (!hasChanged) {\n                const newError = validate && validate(value || '');\n                newError !== error && setError(newError);\n              }\n            }\n          },\n        },\n        info: {\n          hasBeenTouched,\n          hasChanged,\n          error,\n        },\n      };\n\n      return children(propsToRender);\n    },\n    (prev, next) =>\n      !(\n        prev.value !== next.value ||\n        prev.hasChanged !== next.hasChanged ||\n        prev.hasBeenTouched !== next.hasBeenTouched ||\n        prev.error !== next.error\n      ),\n  ),\n);\n","import { useContext } from 'react';\nimport { FieldContext } from '../Context';\n\nexport const useField = () => useContext(FieldContext);\n","import React from 'react';\nimport {\n  withForm,\n  Field,\n  useForm,\n  min,\n  max,\n  numeric,\n  compose,\n  SubmitFunction,\n} from 'context-form-ts';\n\nconst inputs = [\n  {\n    name: 'name',\n    placeholder: 'Name',\n    validate: min(2, '2 characters minimum'),\n  },\n  {\n    name: 'lastName',\n    placeholder: 'Last Name',\n    validate: max(20, '20 characters maximum'),\n  },\n  {\n    name: 'country',\n    placeholder: 'Country',\n    validate: min(5, '5 characters minimum'),\n  },\n  {\n    name: 'age',\n    placeholder: 'Age',\n    validate: compose(\n      numeric('Must be a number'),\n      min(0, '0 minimum'),\n      max(20, '20 maximum'),\n    ),\n    type: 'number',\n  },\n];\n\ninterface Values {\n  name: string;\n  lastName: string;\n  country: string;\n  age: number;\n}\n\nconst App = withForm(() => {\n  const form = useForm();\n\n  const onSubmit: SubmitFunction = (values: Values) =>\n    alert(JSON.stringify(values, null, 4));\n\n  return (\n    <>\n      {inputs.map((input) => (\n        <Field key={input.name} {...input}>\n          {({ input, info, ...props }) => (\n            <div className=\"inputContainer\">\n              <input {...input} className=\"input\" {...props} />\n              {!!info.error && info.hasBeenTouched && (\n                <div className=\"error\">{info.error}</div>\n              )}\n            </div>\n          )}\n        </Field>\n      ))}\n      <button onClick={form.handleSubmit(onSubmit)}>Submit</button>\n    </>\n  );\n});\n\nexport default App;\n","import { useContext } from 'react';\nimport { FormContext } from '../Context';\n\nexport const useForm = () => useContext(FormContext);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}